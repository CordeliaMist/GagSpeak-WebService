// <auto-generated />
using System;
using GagspeakShared.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GagSpeakShared.Migrations
{
    [DbContext(typeof(GagspeakDbContext))]
    [Migration("20240621032935_2024-06-20-AddedVanityTiers")]
    partial class _20240620AddedVanityTiers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GagspeakShared.Models.AccountClaimAuth", b =>
                {
                    b.Property<decimal>("DiscordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_id");

                    b.Property<string>("InitialGeneratedKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("initial_generated_key");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("verification_code");

                    b.HasKey("DiscordId")
                        .HasName("pk_account_claim_auth");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_account_claim_auth_user_uid");

                    b.ToTable("account_claim_auth", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.Auth", b =>
                {
                    b.Property<string>("HashedKey")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("hashed_key");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_banned");

                    b.Property<string>("PrimaryUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("primary_user_uid");

                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.HasKey("HashedKey")
                        .HasName("pk_auth");

                    b.HasIndex("PrimaryUserUID")
                        .HasDatabaseName("ix_auth_primary_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_auth_user_uid");

                    b.ToTable("auth", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.Banned", b =>
                {
                    b.Property<string>("CharacterIdentification")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("character_identification");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("timestamp");

                    b.HasKey("CharacterIdentification")
                        .HasName("pk_banned_users");

                    b.ToTable("banned_users", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.BannedRegistrations", b =>
                {
                    b.Property<string>("DiscordId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("discord_id");

                    b.HasKey("DiscordId")
                        .HasName("pk_banned_registrations");

                    b.ToTable("banned_registrations", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.ClientPair", b =>
                {
                    b.Property<string>("UserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("OtherUserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("other_user_uid");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("timestamp");

                    b.HasKey("UserUID", "OtherUserUID")
                        .HasName("pk_client_pairs");

                    b.HasIndex("OtherUserUID")
                        .HasDatabaseName("ix_client_pairs_other_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_client_pairs_user_uid");

                    b.ToTable("client_pairs", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.ClientPairPermissions", b =>
                {
                    b.Property<string>("UserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("OtherUserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("other_user_uid");

                    b.Property<bool>("ExtendedLockTimes")
                        .HasColumnType("boolean")
                        .HasColumnName("extended_lock_times");

                    b.Property<string>("HardcorePairPermissionsOtherUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("hardcore_pair_permissions_other_user_uid");

                    b.Property<string>("HardcorePairPermissionsUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("hardcore_pair_permissions_user_uid");

                    b.Property<bool>("InHardcore")
                        .HasColumnType("boolean")
                        .HasColumnName("in_hardcore");

                    b.Property<string>("PuppeteerPairPermissionsOtherUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("puppeteer_pair_permissions_other_user_uid");

                    b.Property<string>("PuppeteerPairPermissionsUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("puppeteer_pair_permissions_user_uid");

                    b.Property<string>("ToyboxPairPermissionsOtherUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("toybox_pair_permissions_other_user_uid");

                    b.Property<string>("ToyboxPairPermissionsUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("toybox_pair_permissions_user_uid");

                    b.Property<string>("WardrobePairPermissionsOtherUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("wardrobe_pair_permissions_other_user_uid");

                    b.Property<string>("WardrobePairPermissionsUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("wardrobe_pair_permissions_user_uid");

                    b.HasKey("UserUID", "OtherUserUID")
                        .HasName("pk_client_pair_permissions");

                    b.HasIndex("OtherUserUID")
                        .HasDatabaseName("ix_client_pair_permissions_other_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_client_pair_permissions_user_uid");

                    b.HasIndex("HardcorePairPermissionsUserUID", "HardcorePairPermissionsOtherUserUID")
                        .HasDatabaseName("ix_client_pair_permissions_hardcore_pair_permissions_user_uid_");

                    b.HasIndex("PuppeteerPairPermissionsUserUID", "PuppeteerPairPermissionsOtherUserUID")
                        .HasDatabaseName("ix_client_pair_permissions_puppeteer_pair_permissions_user_uid");

                    b.HasIndex("ToyboxPairPermissionsUserUID", "ToyboxPairPermissionsOtherUserUID")
                        .HasDatabaseName("ix_client_pair_permissions_toybox_pair_permissions_user_uid_to");

                    b.HasIndex("WardrobePairPermissionsUserUID", "WardrobePairPermissionsOtherUserUID")
                        .HasDatabaseName("ix_client_pair_permissions_wardrobe_pair_permissions_user_uid_");

                    b.ToTable("client_pair_permissions", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.Permissions.HardcorePairPermissions", b =>
                {
                    b.Property<string>("UserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("OtherUserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("other_user_uid");

                    b.Property<bool>("AllowBlindfold")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_blindfold");

                    b.Property<bool>("AllowForcedFollow")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_forced_follow");

                    b.Property<bool>("AllowForcedSit")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_forced_sit");

                    b.Property<bool>("AllowForcedToStay")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_forced_to_stay");

                    b.Property<bool>("ForceLockFirstPerson")
                        .HasColumnType("boolean")
                        .HasColumnName("force_lock_first_person");

                    b.Property<bool>("IsBlindfoldeded")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blindfoldeded");

                    b.Property<bool>("IsForcedToFollow")
                        .HasColumnType("boolean")
                        .HasColumnName("is_forced_to_follow");

                    b.Property<bool>("IsForcedToSit")
                        .HasColumnType("boolean")
                        .HasColumnName("is_forced_to_sit");

                    b.Property<bool>("IsForcedToStay")
                        .HasColumnType("boolean")
                        .HasColumnName("is_forced_to_stay");

                    b.HasKey("UserUID", "OtherUserUID")
                        .HasName("pk_hardcore_pair_permissions");

                    b.HasIndex("OtherUserUID")
                        .HasDatabaseName("ix_hardcore_pair_permissions_other_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_hardcore_pair_permissions_user_uid");

                    b.ToTable("hardcore_pair_permissions", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.Permissions.PuppeteerGlobalPermissions", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("text")
                        .HasColumnName("user_uid");

                    b.Property<bool>("EnablePuppeteer")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_puppeteer");

                    b.Property<bool>("GlobalAllowAllRequests")
                        .HasColumnType("boolean")
                        .HasColumnName("global_allow_all_requests");

                    b.Property<bool>("GlobalAllowMotionRequests")
                        .HasColumnType("boolean")
                        .HasColumnName("global_allow_motion_requests");

                    b.Property<bool>("GlobalAllowSitRequests")
                        .HasColumnType("boolean")
                        .HasColumnName("global_allow_sit_requests");

                    b.Property<string>("GlobalTriggerPhrase")
                        .HasColumnType("text")
                        .HasColumnName("global_trigger_phrase");

                    b.HasKey("UserUID")
                        .HasName("pk_puppeteer_global_permissions");

                    b.ToTable("puppeteer_global_permissions", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.Permissions.PuppeteerPairPermissions", b =>
                {
                    b.Property<string>("UserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("OtherUserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("other_user_uid");

                    b.Property<bool>("AllowAllRequests")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_all_requests");

                    b.Property<bool>("AllowMotionRequests")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_motion_requests");

                    b.Property<bool>("AllowSitRequests")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_sit_requests");

                    b.Property<char>("EndChar")
                        .HasColumnType("character(1)")
                        .HasColumnName("end_char");

                    b.Property<char>("StartChar")
                        .HasColumnType("character(1)")
                        .HasColumnName("start_char");

                    b.Property<string>("TriggerPhrase")
                        .HasColumnType("text")
                        .HasColumnName("trigger_phrase");

                    b.HasKey("UserUID", "OtherUserUID")
                        .HasName("pk_puppeteer_pair_permissions");

                    b.HasIndex("OtherUserUID")
                        .HasDatabaseName("ix_puppeteer_pair_permissions_other_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_puppeteer_pair_permissions_user_uid");

                    b.ToTable("puppeteer_pair_permissions", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.Permissions.ToyboxGlobalPermissions", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("text")
                        .HasColumnName("user_uid");

                    b.Property<bool>("EnableToybox")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_toybox");

                    b.Property<bool>("LockToyboxUI")
                        .HasColumnType("boolean")
                        .HasColumnName("lock_toybox_ui");

                    b.Property<int>("ToyIntensity")
                        .HasColumnType("integer")
                        .HasColumnName("toy_intensity");

                    b.Property<bool>("ToyIsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("toy_is_active");

                    b.Property<bool>("UsingSimulatedVibrator")
                        .HasColumnType("boolean")
                        .HasColumnName("using_simulated_vibrator");

                    b.HasKey("UserUID")
                        .HasName("pk_toybox_global_permissions");

                    b.ToTable("toybox_global_permissions", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.Permissions.ToyboxPairPermissions", b =>
                {
                    b.Property<string>("UserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("OtherUserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("other_user_uid");

                    b.Property<bool>("CanChangeToyState")
                        .HasColumnType("boolean")
                        .HasColumnName("can_change_toy_state");

                    b.Property<bool>("CanUsePatterns")
                        .HasColumnType("boolean")
                        .HasColumnName("can_use_patterns");

                    b.Property<bool>("CanUseTriggers")
                        .HasColumnType("boolean")
                        .HasColumnName("can_use_triggers");

                    b.Property<bool>("IntensityControl")
                        .HasColumnType("boolean")
                        .HasColumnName("intensity_control");

                    b.HasKey("UserUID", "OtherUserUID")
                        .HasName("pk_toybox_pair_permissions");

                    b.HasIndex("OtherUserUID")
                        .HasDatabaseName("ix_toybox_pair_permissions_other_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_toybox_pair_permissions_user_uid");

                    b.ToTable("toybox_pair_permissions", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.Permissions.WardrobeGlobalPermissions", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("text")
                        .HasColumnName("user_uid");

                    b.Property<bool>("EnableWardrobe")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_wardrobe");

                    b.Property<bool>("ItemAutoEquip")
                        .HasColumnType("boolean")
                        .HasColumnName("item_auto_equip");

                    b.Property<bool>("LockGagStorageOnGagLock")
                        .HasColumnType("boolean")
                        .HasColumnName("lock_gag_storage_on_gag_lock");

                    b.Property<bool>("RestraintSetAutoEquip")
                        .HasColumnType("boolean")
                        .HasColumnName("restraint_set_auto_equip");

                    b.HasKey("UserUID")
                        .HasName("pk_wardrobe_global_permissions");

                    b.ToTable("wardrobe_global_permissions", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.Permissions.WardrobePairPermissions", b =>
                {
                    b.Property<string>("UserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("OtherUserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("other_user_uid");

                    b.Property<bool>("LockRestraintSets")
                        .HasColumnType("boolean")
                        .HasColumnName("lock_restraint_sets");

                    b.Property<bool>("ToggleRestraintSets")
                        .HasColumnType("boolean")
                        .HasColumnName("toggle_restraint_sets");

                    b.HasKey("UserUID", "OtherUserUID")
                        .HasName("pk_wardrobe_pair_permissions");

                    b.HasIndex("OtherUserUID")
                        .HasDatabaseName("ix_wardrobe_pair_permissions_other_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_wardrobe_pair_permissions_user_uid");

                    b.ToTable("wardrobe_pair_permissions", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.User", b =>
                {
                    b.Property<string>("UID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("uid");

                    b.Property<string>("Alias")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("alias");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<bool>("IsModerator")
                        .HasColumnType("boolean")
                        .HasColumnName("is_moderator");

                    b.Property<DateTime>("LastLoggedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_logged_in");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("timestamp");

                    b.Property<int>("VanityTier")
                        .HasColumnType("integer")
                        .HasColumnName("vanity_tier");

                    b.HasKey("UID")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.UserApperanceData", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("text")
                        .HasColumnName("user_uid");

                    b.Property<string>("SlotOneGagAssigner")
                        .HasColumnType("text")
                        .HasColumnName("slot_one_gag_assigner");

                    b.Property<string>("SlotOneGagPadlock")
                        .HasColumnType("text")
                        .HasColumnName("slot_one_gag_padlock");

                    b.Property<string>("SlotOneGagPassword")
                        .HasColumnType("text")
                        .HasColumnName("slot_one_gag_password");

                    b.Property<DateTimeOffset>("SlotOneGagTimer")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("slot_one_gag_timer");

                    b.Property<string>("SlotOneGagType")
                        .HasColumnType("text")
                        .HasColumnName("slot_one_gag_type");

                    b.Property<string>("SlotThreeGagAssigner")
                        .HasColumnType("text")
                        .HasColumnName("slot_three_gag_assigner");

                    b.Property<string>("SlotThreeGagPadlock")
                        .HasColumnType("text")
                        .HasColumnName("slot_three_gag_padlock");

                    b.Property<string>("SlotThreeGagPassword")
                        .HasColumnType("text")
                        .HasColumnName("slot_three_gag_password");

                    b.Property<DateTimeOffset>("SlotThreeGagTimer")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("slot_three_gag_timer");

                    b.Property<string>("SlotThreeGagType")
                        .HasColumnType("text")
                        .HasColumnName("slot_three_gag_type");

                    b.Property<string>("SlotTwoGagAssigner")
                        .HasColumnType("text")
                        .HasColumnName("slot_two_gag_assigner");

                    b.Property<string>("SlotTwoGagPadlock")
                        .HasColumnType("text")
                        .HasColumnName("slot_two_gag_padlock");

                    b.Property<string>("SlotTwoGagPassword")
                        .HasColumnType("text")
                        .HasColumnName("slot_two_gag_password");

                    b.Property<DateTimeOffset>("SlotTwoGagTimer")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("slot_two_gag_timer");

                    b.Property<string>("SlotTwoGagType")
                        .HasColumnType("text")
                        .HasColumnName("slot_two_gag_type");

                    b.HasKey("UserUID")
                        .HasName("pk_user_apperance_data");

                    b.ToTable("user_apperance_data", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.UserProfileData", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("Base64ProfilePic")
                        .HasColumnType("text")
                        .HasColumnName("base64profile_pic");

                    b.Property<bool>("FlaggedForReport")
                        .HasColumnType("boolean")
                        .HasColumnName("flagged_for_report");

                    b.Property<bool>("ProfileDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("profile_disabled");

                    b.Property<string>("UserDescription")
                        .HasColumnType("text")
                        .HasColumnName("user_description");

                    b.HasKey("UserUID")
                        .HasName("pk_user_profile_data");

                    b.ToTable("user_profile_data", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.UserGlobalPermissions", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<bool>("CmdsFromFriends")
                        .HasColumnType("boolean")
                        .HasColumnName("cmds_from_friends");

                    b.Property<bool>("CmdsFromParty")
                        .HasColumnType("boolean")
                        .HasColumnName("cmds_from_party");

                    b.Property<bool>("DirectChatGarblerActive")
                        .HasColumnType("boolean")
                        .HasColumnName("direct_chat_garbler_active");

                    b.Property<bool>("DirectChatGarblerLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("direct_chat_garbler_locked");

                    b.Property<bool>("LiveGarblerZoneChangeWarn")
                        .HasColumnType("boolean")
                        .HasColumnName("live_garbler_zone_change_warn");

                    b.Property<string>("PuppeteerGlobalPermissionsUserUID")
                        .HasColumnType("text")
                        .HasColumnName("puppeteer_global_permissions_user_uid");

                    b.Property<int>("RevertStyle")
                        .HasColumnType("integer")
                        .HasColumnName("revert_style");

                    b.Property<string>("Safeword")
                        .HasColumnType("text")
                        .HasColumnName("safeword");

                    b.Property<bool>("SafewordUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("safeword_used");

                    b.Property<string>("ToyboxGlobalPermissionsUserUID")
                        .HasColumnType("text")
                        .HasColumnName("toybox_global_permissions_user_uid");

                    b.Property<string>("UserApperanceDataUserUID")
                        .HasColumnType("text")
                        .HasColumnName("user_apperance_data_user_uid");

                    b.Property<string>("WardrobeGlobalPermissionsUserUID")
                        .HasColumnType("text")
                        .HasColumnName("wardrobe_global_permissions_user_uid");

                    b.HasKey("UserUID")
                        .HasName("pk_user_settings_data");

                    b.HasIndex("PuppeteerGlobalPermissionsUserUID")
                        .HasDatabaseName("ix_user_settings_data_puppeteer_global_permissions_user_uid");

                    b.HasIndex("ToyboxGlobalPermissionsUserUID")
                        .HasDatabaseName("ix_user_settings_data_toybox_global_permissions_user_uid");

                    b.HasIndex("UserApperanceDataUserUID")
                        .HasDatabaseName("ix_user_settings_data_user_apperance_data_user_uid");

                    b.HasIndex("WardrobeGlobalPermissionsUserUID")
                        .HasDatabaseName("ix_user_settings_data_wardrobe_global_permissions_user_uid");

                    b.ToTable("user_settings_data", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.AccountClaimAuth", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .HasConstraintName("fk_account_claim_auth_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.Auth", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "PrimaryUser")
                        .WithMany()
                        .HasForeignKey("PrimaryUserUID")
                        .HasConstraintName("fk_auth_users_primary_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .HasConstraintName("fk_auth_users_user_uid");

                    b.Navigation("PrimaryUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.ClientPair", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "OtherUser")
                        .WithMany()
                        .HasForeignKey("OtherUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pairs_users_other_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pairs_users_user_uid");

                    b.Navigation("OtherUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.ClientPairPermissions", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "OtherUser")
                        .WithMany()
                        .HasForeignKey("OtherUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pair_permissions_users_other_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pair_permissions_users_user_uid");

                    b.HasOne("GagspeakShared.Models.Permissions.HardcorePairPermissions", "HardcorePairPermissions")
                        .WithMany()
                        .HasForeignKey("HardcorePairPermissionsUserUID", "HardcorePairPermissionsOtherUserUID")
                        .HasConstraintName("fk_client_pair_permissions_hardcore_pair_permissions_hardcore_");

                    b.HasOne("GagspeakShared.Models.Permissions.PuppeteerPairPermissions", "PuppeteerPairPermissions")
                        .WithMany()
                        .HasForeignKey("PuppeteerPairPermissionsUserUID", "PuppeteerPairPermissionsOtherUserUID")
                        .HasConstraintName("fk_client_pair_permissions_puppeteer_pair_permissions_puppetee");

                    b.HasOne("GagspeakShared.Models.Permissions.ToyboxPairPermissions", "ToyboxPairPermissions")
                        .WithMany()
                        .HasForeignKey("ToyboxPairPermissionsUserUID", "ToyboxPairPermissionsOtherUserUID")
                        .HasConstraintName("fk_client_pair_permissions_toybox_pair_permissions_toybox_pair");

                    b.HasOne("GagspeakShared.Models.Permissions.WardrobePairPermissions", "WardrobePairPermissions")
                        .WithMany()
                        .HasForeignKey("WardrobePairPermissionsUserUID", "WardrobePairPermissionsOtherUserUID")
                        .HasConstraintName("fk_client_pair_permissions_wardrobe_pair_permissions_wardrobe_");

                    b.Navigation("HardcorePairPermissions");

                    b.Navigation("OtherUser");

                    b.Navigation("PuppeteerPairPermissions");

                    b.Navigation("ToyboxPairPermissions");

                    b.Navigation("User");

                    b.Navigation("WardrobePairPermissions");
                });

            modelBuilder.Entity("GagspeakShared.Models.Permissions.HardcorePairPermissions", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "OtherUser")
                        .WithMany()
                        .HasForeignKey("OtherUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hardcore_pair_permissions_users_other_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hardcore_pair_permissions_users_user_uid");

                    b.Navigation("OtherUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.Permissions.PuppeteerPairPermissions", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "OtherUser")
                        .WithMany()
                        .HasForeignKey("OtherUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_puppeteer_pair_permissions_users_other_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_puppeteer_pair_permissions_users_user_uid");

                    b.Navigation("OtherUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.Permissions.ToyboxPairPermissions", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "OtherUser")
                        .WithMany()
                        .HasForeignKey("OtherUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_toybox_pair_permissions_users_other_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_toybox_pair_permissions_users_user_uid");

                    b.Navigation("OtherUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.Permissions.WardrobePairPermissions", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "OtherUser")
                        .WithMany()
                        .HasForeignKey("OtherUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wardrobe_pair_permissions_users_other_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wardrobe_pair_permissions_users_user_uid");

                    b.Navigation("OtherUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.UserProfileData", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_profile_data_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.UserGlobalPermissions", b =>
                {
                    b.HasOne("GagspeakShared.Models.Permissions.PuppeteerGlobalPermissions", "PuppeteerGlobalPermissions")
                        .WithMany()
                        .HasForeignKey("PuppeteerGlobalPermissionsUserUID")
                        .HasConstraintName("fk_user_settings_data_puppeteer_global_permissions_puppeteer_g");

                    b.HasOne("GagspeakShared.Models.Permissions.ToyboxGlobalPermissions", "ToyboxGlobalPermissions")
                        .WithMany()
                        .HasForeignKey("ToyboxGlobalPermissionsUserUID")
                        .HasConstraintName("fk_user_settings_data_toybox_global_permissions_toybox_global_");

                    b.HasOne("GagspeakShared.Models.UserApperanceData", "UserApperanceData")
                        .WithMany()
                        .HasForeignKey("UserApperanceDataUserUID")
                        .HasConstraintName("fk_user_settings_data_user_apperance_data_user_apperance_data_");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_settings_data_users_user_uid");

                    b.HasOne("GagspeakShared.Models.Permissions.WardrobeGlobalPermissions", "WardrobeGlobalPermissions")
                        .WithMany()
                        .HasForeignKey("WardrobeGlobalPermissionsUserUID")
                        .HasConstraintName("fk_user_settings_data_wardrobe_global_permissions_wardrobe_glo");

                    b.Navigation("PuppeteerGlobalPermissions");

                    b.Navigation("ToyboxGlobalPermissions");

                    b.Navigation("User");

                    b.Navigation("UserApperanceData");

                    b.Navigation("WardrobeGlobalPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
